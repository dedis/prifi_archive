=======================================
| PROTOCOLS AND COMMUNICATION METHODS |
=======================================


CONFIG FILES
============

All testing commands require a JSON configuration file with the following
fields:

	NumNodes     int
	NumClients   int
	NumRounds    int
  ResendTime   milliseconds
  Timeout      seconds
  MsgsPerGroup int
  Seed         int

NumRounds refers to the total number of  steps performed by all shuffle
groups, plus the number of transfers between shuffle groups. MsgsPerGroup
refers to the number of client pairs shuffled by each shuffle-group.


CHANNEL SHUFFLE
===============

The files in the gochan subdirectory allow the shuffle techniques above to be
run on a single machine, using Go's lightweight channels. Tests may be invoked
by running gochan [configFile]. To run the tests on multiple OS threads, set
the GOMAXPROCS environment varaible to the number of OS threads you want to
use.


NETWORK SHUFFLE
===============

The files in the netchan subdirectory allow the shuffle techniques above to be
run on a networked cluster of machines. Tests may be invoked as follows:

client [id] [configFile] [nodeURIs] [clientURIs] [nodePubKeys] [message]
server [id] [configFile] [nodeURIs] [clientURIs] [nodePubKeys] [privKey]
genkey [pubkeyFile] [privkeyFile]

At a higher level, we provide scripts, which require login access to all nodes
and clients without a password.

netDist.sh [configFile] [clientURIs] [nodeURIs]
netTest.sh [configFile] [clientURIs] [nodeURIs]

nodeURIs and clientURIs are newline separated files of URIs participating in
the shuffle.

nodePubKeys is a directory of public keys: if nodePubKeys was 'pubKeys' and
there was one node, that node's public key would be found in 'pubKeys/1.pub'.

privKey is a file containing the given node's private key. 


PROTOCOL
========

The network shuffle works over TCP. Messages are seont as follows:

send the round int (4 bytes, big endian)
wait for a 1 byte from the sender
send the number of pairs (4 bytes, big endian)
send all the Xs
send all the Ys
send the number of NewXs (4 bytes, big endian)
send the NewXs
send the number of shuffle proofs (4 bytes, big endian)
send the shuffle proofs
send the number of left proofs (4 bytes, big endian)
send the left proofs
send the number of right proofs (4 bytes, big endian)
send the right proofs

Proofs are sent as follows:
send the number of pairs (4 bytes, big endian)
send the Xs
send the Ys
send the size of the proof (4 bytes)
send the proof

